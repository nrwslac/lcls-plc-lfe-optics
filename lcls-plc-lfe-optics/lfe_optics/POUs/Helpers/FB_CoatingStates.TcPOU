<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CoatingStates" Id="{436d7b1f-e2f3-44dd-bb44-390131674585}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CoatingStates EXTENDS FB_PositionStateBase_WithPMPS
VAR_INPUT
    enumSet: INT;
    stB4C: ST_PositionState;
    stNi: ST_PositionState;
    sB4CType : STRING := ''; //Type of Material on Coating 1
    nB4CPosition: UDINT; // Encoder Count Position of Coating 1
    fB4CDelta: LREAL;//Position Boundary delta in scaled position units
    fB4CVelocity: LREAL;//Velocity
    nB4CCoatingBitmask: DWORD; //Safe Beam Bitmask for the first coating
    sNiType : STRING := '';// Type of Material on Coating 2
    nNiPosition: UDINT; // Encoder Count Position of Coating 2
    fNiDelta: LREAL;//Position Boundary delta in scaled position units
    nNiCoatingBitmask: DWORD; //Safe Beam Bitmask for the second coating
    fNiVelocity: LREAL;//Velocity
    bStatesLock: BOOL;
END_VAR
VAR_OUTPUT
     {attribute 'pytmc' := '
        pv: GET
        io: i
    '}
    enumGet: ENUM_Coating_States;
END_VAR
VAR
     bInitState: BOOL :=TRUE;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInitState THEN
    bInitState := FALSE;
    stB4C.bUseRawCounts := TRUE;
    stB4C.bMoveOk := TRUE;
    stB4C.bValid := TRUE;
    stB4C.stPMPS.nRequestAssertionID := nTransitionAssertionID+1;
    //stB4C.nRequestAssertionID := nTransitionAssertionID+1;
    stB4C.sName := sB4CType;
    stB4C.nEncoderCount := nB4CPosition;
    stB4C.stBeamParams := PMPS_GVL.cstFullBeam;
    stB4C.stBeamParams.neVRange := nB4CCoatingBitmask;
    stB4C.fDelta := fB4CDelta;
    stB4C.fVelocity :=fB4CVelocity;

    stNi.bUseRawCounts := TRUE;
    stNi.bValid := TRUE;
    stNi.bMoveOk := TRUE;
    stNi.bValid := TRUE;
    stNi.nRequestAssertionID := nTransitionAssertionID+2;
    stNi.sName := sNiType;
    stNi.nEncoderCount := nNiPosition;
    stNi.stBeamParams := PMPS_GVL.cstFullBeam;
    stNi.stBeamParams.neVRange := nNiCoatingBitmask;
    stNi.fDelta := fNiDelta;
    stNi.fVelocity := fNiVelocity;


    arrStates[1] := stB4C;
    arrStates[2] := stNi;
END_IF

setState := enumSet;
Exec();
enumGet := getState;
enumSet := setState;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>